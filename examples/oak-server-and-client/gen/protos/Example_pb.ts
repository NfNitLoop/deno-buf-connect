// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file protos/Example.proto (package example.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "../bufbuild/protobuf.ts";
import { Message, proto3, protoInt64 } from "../bufbuild/protobuf.ts";

/**
 * @generated from message example.v1.SeqRequest
 */
export class SeqRequest extends Message<SeqRequest> {
  /**
   * Where should we start generating our sequence?
   *
   * @generated from field: int32 start_at = 1;
   */
  startAt = 0;

  constructor(data?: PartialMessage<SeqRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.v1.SeqRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_at", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SeqRequest {
    return new SeqRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SeqRequest {
    return new SeqRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SeqRequest {
    return new SeqRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SeqRequest | PlainMessage<SeqRequest> | undefined, b: SeqRequest | PlainMessage<SeqRequest> | undefined): boolean {
    return proto3.util.equals(SeqRequest, a, b);
  }
}

/**
 * @generated from message example.v1.SeqResponse
 */
export class SeqResponse extends Message<SeqResponse> {
  /**
   * @generated from field: int64 value = 1;
   */
  value = protoInt64.zero;

  constructor(data?: PartialMessage<SeqResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.v1.SeqResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SeqResponse {
    return new SeqResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SeqResponse {
    return new SeqResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SeqResponse {
    return new SeqResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SeqResponse | PlainMessage<SeqResponse> | undefined, b: SeqResponse | PlainMessage<SeqResponse> | undefined): boolean {
    return proto3.util.equals(SeqResponse, a, b);
  }
}

